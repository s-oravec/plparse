CREATE OR REPLACE PACKAGE ut_plparse_parser AS
    
    --%suitepath(plparse)
    --%suite(plparse_Parser)

    --%test(Empty package body works)
    PROCEDURE pkgBodyEmpty;
    
    --%test(Package body with cursor declaration works)
    PROCEDURE pkgBodyCursor;
    
    --%test(Package body with procedure definition without params works)
    PROCEDURE pkgBodyProcWOParams;
    
    --%test(Package body with procedure definition with params works)
    PROCEDURE pkgBodyProcWParams;
    
    --%test(Package body with procedure declaration and definition)
    PROCEDURE pkgBodyProcDecl;

    --%test(Parses sample package)
    PROCEDURE parseSamplePackageBody;

    --%test(Function def without params)
    PROCEDURE functionDef1;
    
    --%test(Function def with params)
    PROCEDURE functionDef2;

    --%test(Parses procedure with sample IF statements)
    PROCEDURE parseIfSample;
    
    --%test(Parses sample declarations without initialization)
    PROCEDURE parseDeclWithoutInitSample;
    
    --%test(Parses sample declarations with initialization)
    PROCEDURE parseDeclWithInitSample;
    
    --%test(Parses producedure with sample CASE statements)
    PROCEDURE parseCaseSample;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plparse_parser AS

    ---------------------------------------------------------------------------- 
    FUNCTION get_source_lines
    (
        p_owner IN VARCHAR2,
        p_name  IN VARCHAR2,
        p_type  IN VARCHAR2
    ) RETURN plparse.source_lines_type IS
        l_Result plparse.source_lines_type;
    BEGIN
        --
        SELECT Text
          BULK COLLECT
          INTO l_Result
          FROM all_source
         WHERE OWNER = p_owner
           AND Name = p_name
           AND Type = p_type
         ORDER BY Line;
        --
        RETURN l_Result;
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyEmpty IS
        -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'package body pkgBodyEmpty as' || chr(10), 
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('PackageBody');
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyCursor IS
        -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'package body pkgBodyCursor as' || chr(10), 
            '  cursor crs is' || chr(10), 
            '    select '';'' as x ' || chr(10), 
            '     from dual;'|| chr(10), 
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('PackageBody(BlockDeclPart(OtherDecl))');
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyProcWOParams IS
        -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'package body pkgBodyProcWOParams as' || chr(10), 
            '  procedure tradaa is' || chr(10),
            '  begin null; end;' || chr(10),
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('PackageBody(BlockDeclPart(ProcedureDef(BlockCode(SimpleStatement))))');
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyProcWParams IS
        -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'package body pkgBodyProcWParams as' || chr(10), 
            '  procedure tradaa (' || chr(10),
            '    p_in  in integer,' || chr(10),
            '    p_inout in out integer,' || chr(10),
            '    p_out out integer,' || chr(10),
            '    p_colref in table.column%type,' || chr(10),
            '    p_rowref in table%rowtype,' || chr(10),
            '    p_type in owner.type,' || chr(10),
            '    p_typeinpkg in owner.package.type,' || chr(10),
            '    p_crsout out sys_refcursor,' || chr(10),
            '  ) is' || chr(10),
            '  begin null; end;' || chr(10),
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('PackageBody(BlockDeclPart(ProcedureDef(BlockCode(SimpleStatement))))');
    END;

    ---------------------------------------------------------------------------- 
    PROCEDURE pkgBodyProcDecl IS
        -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'package body pkgBodyProcWOParams as' || chr(10), 
            '  procedure tradaa2;' || chr(10),
            '  procedure tradaa1 is' || chr(10),
            '  begin tradaa2; end;' || chr(10),            
            '  procedure tradaa2 is' || chr(10),
            '  begin null; end;' || chr(10),
            'end;' || chr(10)
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('PackageBody(BlockDeclPart(ProcedureDecl,ProcedureDef(BlockCode(UnknownStatement)),ProcedureDef(BlockCode(SimpleStatement))))');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE parseSamplePackageBody IS
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(get_source_lines(USER, 'FIX_PARSER_FNCANDPROC', 'PACKAGE BODY'));
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('PackageBody(BlockDeclPart(ProcedureDef(BlockCode(SimpleStatement)),ProcedureDef(BlockCode(SimpleStatement)),FunctionDef(BlockCode(SimpleStatement)),FunctionDef(BlockCode(SimpleStatement)),ProcedureDef(BlockDeclPart(ProcedureDef(BlockCode(SimpleStatement))),BlockCode(UnknownStatement))))');

    END;

    ----------------------------------------------------------------------------
    PROCEDURE functionDef1 IS
         -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'FUNCTION fncWithoutParams RETURN PLS_INTEGER IS' || chr(10),
            'BEGIN' || chr(10),
            '    RETURN NULL;' || chr(10),
            'END fncWithoutParams;'
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('FunctionDef(BlockCode(SimpleStatement))');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE functionDef2 IS
         -- NoFormat Start
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type(
            'FUNCTION fncWithoutParams (p integer) RETURN PLS_INTEGER IS' || chr(10),
            'BEGIN' || chr(10),
            '    RETURN NULL;' || chr(10),
            'END fncWithoutParams;'
        );
        -- NoFormat End
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(l_sourceLines);
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('FunctionDef(BlockCode(SimpleStatement))');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE parseIfSample IS
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(get_source_lines(USER, 'FIX_PARSER_IF', 'PROCEDURE'));
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('ProcedureDef(BlockCode(Decision(Branch(SimpleStatement)),Decision(Branch(SimpleStatement,SimpleStatement)),Decision(Branch(SimpleStatement),Branch(SimpleStatement)),Decision(Branch(SimpleStatement),Branch(SimpleStatement),Branch(SimpleStatement))))');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE parseDeclWithoutInitSample IS
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(get_source_lines(USER, 'FIX_PARSER_DECL_WITHOUT_INIT', 'PROCEDURE'));
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('ProcedureDef(BlockDeclPart(OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl,OtherDecl),BlockCode(SimpleStatement))');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE parseDeclWithInitSample IS
        l_ast plparse_ast;
    BEGIN
        -- Test
        plparse_parser.initialize(get_source_lines(USER, 'FIX_PARSER_DECL_WITH_INIT', 'PROCEDURE'));
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        ut.expect(l_ast.toString).to_equal('ProcedureDef(BlockDeclPart(ExecutableDecl,ExecutableDecl,ExecutableDecl,ExecutableDecl),BlockCode(SimpleStatement))');
    END;

    ----------------------------------------------------------------------------
    PROCEDURE parseCaseSample IS
        l_ast plparse_ast;
        l_pom integer;
    BEGIN
        -- Test
        plparse_parser.initialize(get_source_lines(USER, 'FIX_PARSER_CASE', 'PROCEDURE'));
        l_ast := plparse_parser.parse;
        --
        -- Expectations
        l_pom := case when l_ast is null then null else 1 end;
        ut.expect(l_pom).to_be_not_null();
        ut.expect(l_ast.toString).to_equal('ProcedureDef(BlockDeclPart(OtherDecl),BlockCode(Decision(Branch(SimpleStatement)),Decision(Branch(SimpleStatement)),<Label>,Decision(Branch(SimpleStatement)),Decision(Branch(SimpleStatement),Branch(SimpleStatement)),Decision(Branch(SimpleStatement))))');
    END;

END;
/
