CREATE OR REPLACE PACKAGE ut_plparse_token_stream AS
    
    --%suitepath(plparse)
    --%suite(plparse_token_stream)

    --%test(initialize works with empty)
    PROCEDURE initializeWorksWithEmpty;
    
    --%test(initialize works with non empty)
    PROCEDURE initializeWorksWithNonEmpty;

    --%test(currentItem and consume works)
    PROCEDURE currentAndConsumeItemWorks;

    --%test(rollback without takeSnapshot throws)
    --%throws(-20000)
    PROCEDURE rlbckWOSnapshotThrows;
    
    --%test(commit without takeSnapshot throws)
    --%throws(-20000)
    PROCEDURE commitWOSnapshotThrows;
    
    --%test(commit after takeSnapshot works)
    --%throws(-20000)
    PROCEDURE commitAfterSnapWorks;
    
    --%test(rollback after takeSnapshot works)
    --%throws(-20000)
    PROCEDURE rollbackAfterSnapWorks;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plparse_token_stream AS

    ----------------------------------------------------------------------------
    PROCEDURE initializeWorksWithEmpty IS
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type();
        l_pom         integer;
    BEGIN
        -- Test
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        --
        -- Expectations
        ut.expect(plparse_token_stream.currentToken().tokenType).to_equal(plex.tk_EOF);
        ut.expect(plparse_token_stream.getIndex).to_equal(1);
        ut.expect(plparse_token_stream.eof,'EOF is what has left').to_be_true();
        l_pom := case when plparse_token_stream.peek(1) is null then null else 1 end;
        ut.expect(l_pom).to_be_null();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE initializeWorksWithNonEmpty IS
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type('begin' || chr(10), 'end');
    BEGIN
        -- Test
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        --
        -- Expectations
        ut.expect(plparse_token_stream.currentToken().tokenType).to_equal(plex.tk_BEGIN);
        ut.expect(plparse_token_stream.peek(1).tokenType).to_equal(plex.tk_End);
        ut.expect(plparse_token_stream.peek(2).tokenType).to_equal(plex.tk_EOF);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE currentAndConsumeItemWorks IS
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type('begin' || chr(10), 'end');
    BEGIN
        -- Test
        -- prepare
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        --
        -- Expectations
        ut.expect(plparse_token_stream.currentToken().tokenType).to_equal(plex.tk_BEGIN);
        ut.expect(plparse_token_stream.getIndex).to_equal(1);
        --
        -- Continue Test
        plparse_token_stream.consume;
        --
        -- Expectations
        ut.expect(plparse_token_stream.currentToken().tokenType).to_equal(plex.tk_End);
        ut.expect(plparse_token_stream.getIndex).to_equal(2);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE rlbckWOSnapshotThrows IS
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type('begin' || chr(10), 'end');
    BEGIN
        -- Prepare
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        -- Test
        plparse_token_stream.rollbackSnapshot;
        -- plparse_token_stream.rollbackSnapshot should have thrown.
    END;

    ----------------------------------------------------------------------------
    PROCEDURE commitWOSnapshotThrows IS
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type('begin' || chr(10), 'end');
    BEGIN
        -- Prepare
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        -- Test
        plparse_token_stream.commitSnapshot;
        -- plparse_token_stream.commitSnapshot should have thrown.
    END;

    ----------------------------------------------------------------------------
    PROCEDURE commitAfterSnapWorks IS
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type('begin' || chr(10), 'end');
    BEGIN
        -- Prepare
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        --
        plparse_token_stream.takeSnapshot;
        plparse_token_stream.consume;
        plparse_token_stream.commitSnapshot;
        -- Test
        plparse_token_stream.rollbackSnapshot;
        -- plparse_token_stream.rollbackSnapshot should have thrown.
    END;

    ----------------------------------------------------------------------------
    PROCEDURE rollbackAfterSnapWorks IS
        l_indexBefore PLS_INTEGER;
        l_sourceLines plparse.source_lines_type := plparse.source_lines_type('begin' || chr(10), 'end');
    BEGIN
        -- Test
        -- prepare
        plparse_token_stream.initialize(p_source_lines => l_sourceLines);
        --
        plparse_token_stream.takeSnapshot;
        l_indexBefore := plparse_token_stream.getIndex;
        plparse_token_stream.consume;
        plparse_token_stream.rollbackSnapshot;
        -- indexe is restored to before take snapshot
        --
        -- Expectations
        ut.expect(plparse_token_stream.getIndex).to_equal(l_indexBefore);
        -- consecutive rollback throws as stack is empty
        plparse_token_stream.commitSnapshot;
        -- plparse_token_stream.commitSnapshot should have thrown.
    END;

END;
/
